# roles/galera/tasks/main.yml
---
- name: Include variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: "Include {{ ansible_distribution }} tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: Check running Mysql
  shell: 'ps -ef | grep -E "mys\\qld" | tr -s " " " " | cut -d" " -f2 |head -n1'
  changed_when: false
  ignore_errors: true
  register: _openio_galera_mysqld_already_running

- name: Check data directory
  stat:
    path: "{{ openio_galera_datadir }}"
  register: "_openio_galera_data_exist"
  tags: install

- name: Check Galera cluster wsrep status
  mysql_variables:
    variable: "wsrep_on"
    login_user: "{{ openio_galera_root_user }}"
    login_password: "{{ openio_galera_root_password }}"
    login_unix_socket: "{{ openio_galera_socket }}"
  when: _openio_galera_mysqld_already_running.stdout
  register: "_openio_galera_wsrep_on"
  tags: install
  failed_when: false
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ openio_galera_packages }}"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: install
  register: install_packages
  until: install_packages is success
  retries: 5
  delay: 2

- name: Ensure service is started for securing
  service:
    name: "{{ openio_galera_service }}"
    state: started
    enabled: "{{ openio_galera_service_enabled }}"
  register: _openio_galera_service_started
  until: _openio_galera_service_started is success
  retries: 2
  delay: 10
  tags: configure
  failed_when: false

- name: Disable wsrep API
  command: systemctl set-environment MYSQLD_OPTS="--wsrep_on=OFF"
  when: _openio_galera_service_started.state is not defined or _openio_galera_service_started.state != 'started'
  register: _openio_galera_systemctl_set_environment

- name: Retry starting service for securing
  service:
    name: "{{ openio_galera_service }}"
    state: started
    enabled: "{{ openio_galera_service_enabled }}"
  register: _openio_galera_service_started2
  until: _openio_galera_service_started2 is success
  retries: 2
  delay: 10
  tags: configure
  failed_when:
    - _openio_galera_service_started2 is failed or _openio_galera_service_started2.state != 'started'
  when: _openio_galera_service_started.state is not defined or _openio_galera_service_started.state != 'started'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Check Galera cluster size
  shell:
    mysql -BN -u root -p"{{ openio_galera_root_password }}" -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size'"|cut -f2
  changed_when: false
  register: "_openio_galera_wsrep_cluster_size"
  tags: install
  when: "(_openio_galera_wsrep_on.msg is defined and _openio_galera_wsrep_on.msg == 'ON') \
          or _openio_galera_service_started is success"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Include secure tasks
  import_tasks: secure_install.yml
  tags: configure

- name: Generate config file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'my.cnf.j2', dest: "{{ openio_galera_conf_global_file }}" }
    - { src: 'mariadb.cnf.j2', dest: "{{ openio_galera_conf_mariadb_file }}" }
    - { src: 'galera.cnf.j2', dest: "{{ openio_galera_conf_galera_file }}" }
  tags: configure

- name: Configure swappiness
  sysctl:
    name: vm.swappiness
    value: "{{ openio_galera_swappiness }}"
    state: present
  when: docker is not defined

- name: Bootstrap Cluster
  import_tasks: bootstrap.yml
  tags: configure
  when:
    - openio_galera_bootstrap_cluster
    - not openio_galera_provision_only

- name: include postinstall tasks
  import_tasks: postinstall.yml
  tags: configure
  when:
    - openio_galera_bind_address == openio_galera_master_node
    - not openio_galera_provision_only
...
